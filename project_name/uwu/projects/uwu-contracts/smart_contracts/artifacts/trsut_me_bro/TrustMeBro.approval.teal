#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 4
    bytecblock "assetid" "unitaryprice"
    // smart_contracts/trsut_me_bro/contract.py:5
    // class TrustMeBro(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0x878cbb3d 0xcc760037 0x1574535a 0x37b9e7b4 // method "create_application(asset,uint64)void", method "set_price(uint64)void", method "opt_in_to_asset(pay)void", method "user_opt_in(pay)void"
    txna ApplicationArgs 0
    match main_create_application_route@3 main_set_price_route@4 main_opt_in_to_asset_route@5 main_user_opt_in_route@6

main_after_if_else@10:
    // smart_contracts/trsut_me_bro/contract.py:5
    // class TrustMeBro(ARC4Contract):
    intc_1 // 0
    return

main_user_opt_in_route@6:
    // smart_contracts/trsut_me_bro/contract.py:37
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/trsut_me_bro/contract.py:5
    // class TrustMeBro(ARC4Contract):
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/trsut_me_bro/contract.py:37
    // @abimethod()
    callsub user_opt_in
    intc_0 // 1
    return

main_opt_in_to_asset_route@5:
    // smart_contracts/trsut_me_bro/contract.py:21-22
    // # opt in to the asset that will be sold
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/trsut_me_bro/contract.py:5
    // class TrustMeBro(ARC4Contract):
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/trsut_me_bro/contract.py:21-22
    // # opt in to the asset that will be sold
    // @abimethod()
    callsub opt_in_to_asset
    intc_0 // 1
    return

main_set_price_route@4:
    // smart_contracts/trsut_me_bro/contract.py:15-16
    // #update the listing price
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/trsut_me_bro/contract.py:5
    // class TrustMeBro(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/trsut_me_bro/contract.py:15-16
    // #update the listing price
    // @abimethod()
    callsub set_price
    intc_0 // 1
    return

main_create_application_route@3:
    // smart_contracts/trsut_me_bro/contract.py:9-10
    // #create the app
    // @abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/trsut_me_bro/contract.py:5
    // class TrustMeBro(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // smart_contracts/trsut_me_bro/contract.py:9-10
    // #create the app
    // @abimethod(allow_actions=["NoOp"], create="require")
    callsub create_application
    intc_0 // 1
    return


// smart_contracts.trsut_me_bro.contract.TrustMeBro.create_application(asset_id: uint64, unitary_price: uint64) -> void:
create_application:
    // smart_contracts/trsut_me_bro/contract.py:9-11
    // #create the app
    // @abimethod(allow_actions=["NoOp"], create="require")
    // def create_application(self, asset_id: Asset, unitary_price: UInt64) -> None:
    proto 2 0
    // smart_contracts/trsut_me_bro/contract.py:12
    // self.assetid = asset_id.id
    bytec_0 // "assetid"
    frame_dig -2
    app_global_put
    // smart_contracts/trsut_me_bro/contract.py:13
    // self.unitaryprice = unitary_price
    bytec_1 // "unitaryprice"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.trsut_me_bro.contract.TrustMeBro.set_price(unitary_price: uint64) -> void:
set_price:
    // smart_contracts/trsut_me_bro/contract.py:15-17
    // #update the listing price
    // @abimethod()
    // def set_price(self, unitary_price: UInt64) -> None:
    proto 1 0
    // smart_contracts/trsut_me_bro/contract.py:18
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/trsut_me_bro/contract.py:19
    // self.unitaryprice = unitary_price
    bytec_1 // "unitaryprice"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.trsut_me_bro.contract.TrustMeBro.opt_in_to_asset(mbrpay: uint64) -> void:
opt_in_to_asset:
    // smart_contracts/trsut_me_bro/contract.py:21-23
    // # opt in to the asset that will be sold
    // @abimethod()
    // def opt_in_to_asset(self, mbrpay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/trsut_me_bro/contract.py:24
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/trsut_me_bro/contract.py:25
    // assert not Global.current_application_address.is_opted_in(Asset(self.assetid))
    global CurrentApplicationAddress
    intc_1 // 0
    bytec_0 // "assetid"
    app_global_get_ex
    assert // check self.assetid exists
    swap
    dig 1
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/trsut_me_bro/contract.py:27
    // assert mbrpay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/trsut_me_bro/contract.py:29
    // assert mbrpay.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // smart_contracts/trsut_me_bro/contract.py:31-35
    // itxn.AssetTransfer(
    //     xfer_asset= self.assetid,
    //     asset_receiver= Global.current_application_address,
    //     asset_amount= 0,
    // ).submit()
    itxn_begin
    // smart_contracts/trsut_me_bro/contract.py:33
    // asset_receiver= Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/trsut_me_bro/contract.py:34
    // asset_amount= 0,
    intc_1 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/trsut_me_bro/contract.py:31
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/trsut_me_bro/contract.py:31-35
    // itxn.AssetTransfer(
    //     xfer_asset= self.assetid,
    //     asset_receiver= Global.current_application_address,
    //     asset_amount= 0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.trsut_me_bro.contract.TrustMeBro.user_opt_in(mbrpay: uint64) -> void:
user_opt_in:
    // smart_contracts/trsut_me_bro/contract.py:37-38
    // @abimethod()
    // def user_opt_in(self, mbrpay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/trsut_me_bro/contract.py:40
    // assert mbrpay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/trsut_me_bro/contract.py:42
    // assert mbrpay.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // smart_contracts/trsut_me_bro/contract.py:44-48
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetid,
    //     asset_receiver=Txn.sender,
    //     asset_amount=0
    // ).submit()
    itxn_begin
    // smart_contracts/trsut_me_bro/contract.py:45
    // xfer_asset=self.assetid,
    intc_1 // 0
    bytec_0 // "assetid"
    app_global_get_ex
    assert // check self.assetid exists
    // smart_contracts/trsut_me_bro/contract.py:46
    // asset_receiver=Txn.sender,
    txn Sender
    // smart_contracts/trsut_me_bro/contract.py:47
    // asset_amount=0
    intc_1 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/trsut_me_bro/contract.py:44
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/trsut_me_bro/contract.py:44-48
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetid,
    //     asset_receiver=Txn.sender,
    //     asset_amount=0
    // ).submit()
    itxn_submit
    retsub
